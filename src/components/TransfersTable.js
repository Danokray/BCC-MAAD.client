import React from 'react';
import styled from 'styled-components';
import { theme } from '../styles/theme';
import Table from './ui/Table';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';

const TransfersTableContainer = styled.div`
  overflow: hidden;
`;

const TableHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: ${theme.spacing.lg};
`;

const TableTitle = styled.h3`
  font-size: ${theme.typography.fontSize.lg};
  font-weight: ${theme.typography.fontWeight.semibold};
  color: ${theme.colors.textPrimary};
  margin: 0;
`;

const TransferAmount = styled.span`
  font-weight: ${theme.typography.fontWeight.semibold};
  color: ${props => props.positive ? theme.colors.success : theme.colors.error};
`;

const TransferDirection = styled.span`
  display: inline-flex;
  align-items: center;
  padding: ${theme.spacing.xs} ${theme.spacing.sm};
  border-radius: ${theme.borderRadius.full};
  font-size: ${theme.typography.fontSize.xs};
  font-weight: ${theme.typography.fontWeight.medium};
  text-transform: uppercase;
  letter-spacing: 0.5px;

  ${props => props.direction === 'incoming' && `
    background-color: ${theme.colors.success}15;
    color: ${theme.colors.success};
  `}

  ${props => props.direction === 'outgoing' && `
    background-color: ${theme.colors.error}15;
    color: ${theme.colors.error};
  `}
`;

const TransferType = styled.span`
  display: inline-flex;
  align-items: center;
  padding: ${theme.spacing.xs} ${theme.spacing.sm};
  border-radius: ${theme.borderRadius.full};
  font-size: ${theme.typography.fontSize.xs};
  font-weight: ${theme.typography.fontWeight.medium};
  background-color: ${theme.colors.primary}15;
  color: ${theme.colors.primary};
`;

const TransfersTable = ({ transfers, isLoading, onTransferClick }) => {
  const formatCurrency = (amount, currency = 'KZT') => {
    if (typeof currency !== 'string' || currency === 'string' || currency === '') {
      currency = 'KZT';
    }
    
    const validCurrencies = ['KZT', 'USD', 'EUR', 'RUB'];
    const safeCurrency = validCurrencies.includes(currency) ? currency : 'KZT';
    const safeAmount = typeof amount === 'number' ? amount : parseFloat(amount) || 0;
    
    try {
      return new Intl.NumberFormat('ru-KZ', {
        style: 'currency',
        currency: safeCurrency,
        minimumFractionDigits: 0,
        maximumFractionDigits: 2,
      }).format(safeAmount);
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã:', error);
      return `${safeAmount} ${safeCurrency}`;
    }
  };

  const formatDate = (dateString) => {
    return format(new Date(dateString), 'dd.MM.yyyy', { locale: ru });
  };

  const getDirectionText = (type) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (type && type.endsWith('_in')) {
      return '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ';
    } else if (type && type.endsWith('_out')) {
      return '–ò—Å—Ö–æ–¥—è—â–∏–π';
    }
    
    // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    switch (type) {
      case 'incoming': return '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ';
      case 'outgoing': return '–ò—Å—Ö–æ–¥—è—â–∏–π';
      default: return '‚Äî';
    }
  };

  const getTypeText = (type) => {
    const typeMap = {
      salary_in: '–ó–∞—Ä–ø–ª–∞—Ç–∞',
      stipend_in: '–°—Ç–∏–ø–µ–Ω–¥–∏—è',
      family_in: '–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç —Å–µ–º—å–∏',
      cashback_in: '–ö—ç—à–±—ç–∫',
      refund_in: '–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤',
      card_in: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã',
      p2p_out: '–ü–µ—Ä–µ–≤–æ–¥ P2P',
      card_out: '–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π',
      atm_withdrawal: '–°–Ω—è—Ç–∏–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ',
      utilities_out: '–û–ø–ª–∞—Ç–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥',
      loan_payment_out: '–ü–ª–∞—Ç–µ–∂ –ø–æ –∫—Ä–µ–¥–∏—Ç—É',
      cc_repayment_out: '–ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã',
      installment_payment_out: '–ü–ª–∞—Ç–µ–∂ –ø–æ —Ä–∞—Å—Å—Ä–æ—á–∫–µ',
      fx_buy: '–ü–æ–∫—É–ø–∫–∞ –≤–∞–ª—é—Ç—ã',
      fx_sell: '–ü—Ä–æ–¥–∞–∂–∞ –≤–∞–ª—é—Ç—ã',
      invest_out: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
      invest_in: '–î–æ—Ö–æ–¥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π',
      deposit_topup_out: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞',
      deposit_fx_topup_out: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞',
      deposit_fx_withdraw_in: '–°–Ω—è—Ç–∏–µ —Å –≤–∞–ª—é—Ç–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞',
      gold_buy_out: '–ü–æ–∫—É–ø–∫–∞ –∑–æ–ª–æ—Ç–∞',
      gold_sell_in: '–ü—Ä–æ–¥–∞–∂–∞ –∑–æ–ª–æ—Ç–∞'
    };
    return typeMap[type] || type || '‚Äî';
  };

  const getDirectionFromType = (type) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (type && type.endsWith('_in')) {
      return 'incoming';
    } else if (type && type.endsWith('_out')) {
      return 'outgoing';
    }
    
    // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    return null;
  };

  if (isLoading) {
    return (
      <TransfersTableContainer>
        <div style={{ textAlign: 'center', padding: theme.spacing['2xl'] }}>
          –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...
        </div>
      </TransfersTableContainer>
    );
  }

  return (
    <TransfersTableContainer>
      <TableHeader>
        <TableTitle>–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤</TableTitle>
      </TableHeader>

      <Table>
        <Table.Header>
          <Table.Row>
            <Table.HeaderCell>–î–∞—Ç–∞</Table.HeaderCell>
            <Table.HeaderCell>–¢–∏–ø</Table.HeaderCell>
            <Table.HeaderCell>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</Table.HeaderCell>
            <Table.HeaderCell>–°—É–º–º–∞</Table.HeaderCell>
          </Table.Row>
        </Table.Header>
        <Table.Body>
          {transfers && transfers.length > 0 ? (
            transfers.map((transfer, index) => (
              <Table.Row 
                key={transfer.id || index} 
                clickable
                onClick={() => onTransferClick && onTransferClick(transfer)}
              >
                <Table.Cell>{formatDate(transfer.date || transfer.createdAt || new Date())}</Table.Cell>
                <Table.Cell>
                  <TransferType>
                    {getTypeText(transfer.type)}
                  </TransferType>
                </Table.Cell>
                <Table.Cell>
                  <TransferDirection direction={transfer.direction || getDirectionFromType(transfer.type)}>
                    {getDirectionText(transfer.type || transfer.direction)}
                  </TransferDirection>
                </Table.Cell>
                <Table.Cell>
                  <TransferAmount positive={transfer.amount > 0}>
                    {transfer.amount > 0 ? '+' : ''}{formatCurrency(transfer.amount, transfer.currency || 'KZT')}
                  </TransferAmount>
                </Table.Cell>
              </Table.Row>
            ))
          ) : (
            <Table.Row>
              <Table.Cell colSpan="4">
                <Table.EmptyState>
                  <Table.EmptyStateIcon>üí∏</Table.EmptyStateIcon>
                  <Table.EmptyStateText>–ü–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</Table.EmptyStateText>
                  <Table.EmptyStateSubtext>
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
                  </Table.EmptyStateSubtext>
                </Table.EmptyState>
              </Table.Cell>
            </Table.Row>
          )}
        </Table.Body>
      </Table>
    </TransfersTableContainer>
  );
};

export default TransfersTable;
