// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
import { authAPI, clientAPI, transactionsAPI, transfersAPI, pushAPI } from '../services/api';

export const testApiConnection = async () => {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...');
  console.log('üìç API URL: https://localhost:7175');
  
  const results = {
    auth: false,
    client: false,
    transactions: false,
    transfers: false,
    push: false
  };

  try {
    // –¢–µ—Å—Ç Auth API
    console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Auth API...');
    try {
      await authAPI.getCurrentUser();
      results.auth = true;
      console.log('‚úÖ Auth API: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.log('‚ö†Ô∏è Auth API: –û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞):', error.message);
    }

    // –¢–µ—Å—Ç Client API
    console.log('üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Client API...');
    try {
      await clientAPI.getProfile();
      results.client = true;
      console.log('‚úÖ Client API: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.log('‚ö†Ô∏è Client API: –û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏):', error.message);
    }

    // –¢–µ—Å—Ç Transactions API
    console.log('üí≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Transactions API...');
    try {
      await transactionsAPI.getTransactions();
      results.transactions = true;
      console.log('‚úÖ Transactions API: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.log('‚ö†Ô∏è Transactions API: –û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏):', error.message);
    }

    // –¢–µ—Å—Ç Transfers API
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Transfers API...');
    try {
      await transfersAPI.getTransfers();
      results.transfers = true;
      console.log('‚úÖ Transfers API: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.log('‚ö†Ô∏è Transfers API: –û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏):', error.message);
    }

    // –¢–µ—Å—Ç Push API
    console.log('üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Push API...');
    try {
      await pushAPI.getLatestPush();
      results.push = true;
      console.log('‚úÖ Push API: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.log('‚ö†Ô∏è Push API: –û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏):', error.message);
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:');
  console.log('==================');
  Object.entries(results).forEach(([api, success]) => {
    console.log(`${success ? '‚úÖ' : '‚ùå'} ${api.toUpperCase()} API: ${success ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
  });

  const availableApis = Object.values(results).filter(Boolean).length;
  const totalApis = Object.keys(results).length;
  
  console.log(`\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${availableApis}/${totalApis} API –¥–æ—Å—Ç—É–ø–Ω—ã`);
  
  if (availableApis === 0) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .NET –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:7175');
  } else if (availableApis === totalApis) {
    console.log('üéâ –í—Å–µ API –¥–æ—Å—Ç—É–ø–Ω—ã! –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  } else {
    console.log('‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
  }

  return results;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ API
export const testSpecificApi = async (apiName) => {
  const apis = {
    auth: authAPI,
    client: clientAPI,
    transactions: transactionsAPI,
    transfers: transfersAPI,
    push: pushAPI
  };

  const api = apis[apiName];
  if (!api) {
    console.error(`‚ùå API "${apiName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return false;
  }

  console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${apiName.toUpperCase()} API...`);
  
  try {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç API
    switch (apiName) {
      case 'auth':
        await api.getCurrentUser();
        break;
      case 'client':
        await api.getProfile();
        break;
      case 'transactions':
        await api.getTransactions();
        break;
      case 'transfers':
        await api.getTransfers();
        break;
      case 'push':
        await api.getLatestPush();
        break;
      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π API: ${apiName}`);
    }
    
    console.log(`‚úÖ ${apiName.toUpperCase()} API: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ`);
    return true;
  } catch (error) {
    console.log(`‚ùå ${apiName.toUpperCase()} API: –û—à–∏–±–∫–∞ -`, error.message);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
export const testLoginWithData = async (credentials) => {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', credentials);
  
  try {
    const response = await authAPI.login(credentials);
    console.log('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω:', response);
    return response;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:', error);
    console.error('‚ùå –°—Ç–∞—Ç—É—Å:', error.response?.status);
    console.error('‚ùå –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response?.data);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
export const testCorrectLoginFormat = async () => {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...');
  
  // –¢–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–æ–ª–µ–π
  const correctFormat = { clientCode: "1", password: "1234" };
  console.log('üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º:', correctFormat);
  
  return await testLoginWithData(correctFormat);
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== 'undefined') {
  window.testApiConnection = testApiConnection;
  window.testSpecificApi = testSpecificApi;
  window.testLoginWithData = testLoginWithData;
  window.testCorrectLoginFormat = testCorrectLoginFormat;
}
